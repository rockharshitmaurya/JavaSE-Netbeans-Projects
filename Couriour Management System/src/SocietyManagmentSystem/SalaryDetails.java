/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package SocietyManagmentSystem;

import java.awt.Color;
import java.util.Calendar;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author HarshitMaurya
 */
public class SalaryDetails extends javax.swing.JFrame {

    /**
     * Creates new form CouriourManagementSystem
     */
    public SalaryDetails() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel8 = new javax.swing.JPanel();
        jLabel43 = new javax.swing.JLabel();
        SearchCombo = new javax.swing.JComboBox<>();
        SearchComboDuration = new javax.swing.JComboBox<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        CustomerAllDetails = new javax.swing.JTable();
        ReportEngine = new javax.swing.JTextField();
        jLabel44 = new javax.swing.JLabel();
        QuantitySum = new javax.swing.JLabel();
        QuantitySum1 = new javax.swing.JLabel();
        PriceSum = new javax.swing.JLabel();
        PriceSumLabel = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel8.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel43.setFont(new java.awt.Font("Trajan Pro 3", 1, 40)); // NOI18N
        jLabel43.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel43.setText("salary detail");
        jPanel8.add(jLabel43, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 10, -1, -1));

        SearchCombo.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        SearchCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Search By", "Name", "Phone No", "Employee I'd" }));
        SearchCombo.setBorder(null);
        SearchCombo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                SearchComboMouseEntered(evt);
            }
        });
        jPanel8.add(SearchCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 70, 110, 30));

        SearchComboDuration.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        SearchComboDuration.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Short By", "Monthly", "Yearly", "Today" }));
        SearchComboDuration.setBorder(null);
        SearchComboDuration.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                SearchComboDurationItemStateChanged(evt);
            }
        });
        SearchComboDuration.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                SearchComboDurationMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                SearchComboDurationMouseExited(evt);
            }
        });
        SearchComboDuration.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchComboDurationActionPerformed(evt);
            }
        });
        jPanel8.add(SearchComboDuration, new org.netbeans.lib.awtextra.AbsoluteConstraints(1200, 70, 90, 30));

        CustomerAllDetails.setBackground(new java.awt.Color(102, 102, 102));
        CustomerAllDetails.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        CustomerAllDetails.setForeground(new java.awt.Color(255, 255, 255));
        CustomerAllDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "S.NO", "Feedabacks", "Sender"
            }
        ));
        jScrollPane3.setViewportView(CustomerAllDetails);

        jPanel8.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 160, 1310, 430));

        ReportEngine.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        ReportEngine.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        ReportEngine.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        ReportEngine.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                ReportEngineMouseEntered(evt);
            }
        });
        ReportEngine.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                ReportEngineKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                ReportEngineKeyTyped(evt);
            }
        });
        jPanel8.add(ReportEngine, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 80, 400, 40));

        jLabel44.setFont(new java.awt.Font("Trajan Pro 3", 1, 40)); // NOI18N
        jLabel44.setForeground(new java.awt.Color(255, 255, 255));
        jLabel44.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel44.setText("<<");
        jLabel44.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel44MouseClicked(evt);
            }
        });
        jPanel8.add(jLabel44, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, -1, -1));

        QuantitySum.setBackground(new java.awt.Color(255, 255, 255));
        QuantitySum.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        QuantitySum.setForeground(new java.awt.Color(255, 255, 255));
        jPanel8.add(QuantitySum, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 600, 110, 20));

        QuantitySum1.setBackground(new java.awt.Color(255, 255, 255));
        QuantitySum1.setFont(new java.awt.Font("Tahoma", 1, 17)); // NOI18N
        QuantitySum1.setForeground(new java.awt.Color(255, 255, 255));
        jPanel8.add(QuantitySum1, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 600, 150, 20));

        PriceSum.setBackground(new java.awt.Color(255, 255, 255));
        PriceSum.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jPanel8.add(PriceSum, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 600, 110, 20));

        PriceSumLabel.setBackground(new java.awt.Color(255, 255, 255));
        PriceSumLabel.setFont(new java.awt.Font("Tahoma", 1, 17)); // NOI18N
        PriceSumLabel.setForeground(new java.awt.Color(51, 51, 51));
        jPanel8.add(PriceSumLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 600, 150, 20));

        jLabel46.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Image_from_million-wallpapers.com (3).jpg"))); // NOI18N
        jLabel46.setText("  ");
        jPanel8.add(jLabel46, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1320, 700));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1320, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 700, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void SearchComboMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SearchComboMouseEntered
        QuantitySum.setVisible(false);
        QuantitySum1.setVisible(false);
    }//GEN-LAST:event_SearchComboMouseEntered

    private void SearchComboDurationItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_SearchComboDurationItemStateChanged
        try
        {
            Calendar c=Calendar.getInstance();
            int currentdate=c.get(Calendar.DATE);
            int currentmonth=c.get(Calendar.MONTH);
            int currentyear=c.get(Calendar.YEAR);
            int dd,mm,yyyy;
            double totlesalay=0,paidsalary=0;
            if(SearchComboDuration.getSelectedItem().toString().equalsIgnoreCase("Monthly"))
            {

                Vector <String> header =new Vector <String>();
                Vector<Vector<String>> data=new Vector<Vector<String>>();
                header.add("Employee Name");
                header.add("Employee Contact");
                header.add("Receive  Date");
                header.add("Salary From");
                header.add("Totle Salary");
                header.add("Payed Salary");
                header.add("Pending Salary");
   

                DBConnection db=new DBConnection();
                db.pstmt=db.con.prepareStatement("select * from payed_salary order by curdate");
                db.rst=db.pstmt.executeQuery();
                while(db.rst.next())
                {
                    Vector<String> temp=new Vector<String>();
                    String date=db.rst.getString(5);
                    dd=Integer.parseInt(date.substring(8));
                    System.out.println(dd);
                    mm=Integer.parseInt(date.substring(5,7));
                    System.out.println(mm);
                    yyyy=Integer.parseInt(date.substring(0,4));
                    System.out.println(yyyy);
                    System.out.println("CurMonth"+currentmonth);
                    if(mm==(currentmonth+1))
                    {
                        temp.add(db.rst.getString(1));
                        temp.add(db.rst.getString(3));
                        totlesalay+=Double.parseDouble(db.rst.getString(6));
                        temp.add(db.rst.getString(5));
                       paidsalary+=Double.parseDouble(db.rst.getString(7));
                        temp.add(db.rst.getString(8));
                        temp.add(db.rst.getString(6));
                         temp.add(db.rst.getString(7));
                          temp.add(((totlesalay-paidsalary)+""));

                    }

                    data.add(temp);
                  
                }
                CustomerAllDetails.setModel(new DefaultTableModel(data,header));
            }
            if(SearchComboDuration.getSelectedItem().toString().equalsIgnoreCase("Yearly"))
            {

                  Vector <String> header =new Vector <String>();
                Vector<Vector<String>> data=new Vector<Vector<String>>();
                header.add("Employee Name");
                header.add("Employee Contact");
                header.add("Receive  Date");
                header.add("Salary From");
                header.add("Totle Salary");
                header.add("Payed Salary");
                header.add("Pending Salary");
   

                DBConnection db=new DBConnection();
                db.pstmt=db.con.prepareStatement("select * from payed_salary order by curdate");
                db.rst=db.pstmt.executeQuery();
                while(db.rst.next())
                {
                     Vector<String> temp=new Vector<String>();
                    String date=db.rst.getString(5);
                    dd=Integer.parseInt(date.substring(8));
                    System.out.println(dd);
                    mm=Integer.parseInt(date.substring(5,7));
                    System.out.println(mm);
                    yyyy=Integer.parseInt(date.substring(0,4));
                    System.out.println(yyyy);
                    System.out.println("CurMonth"+currentmonth);
                    if(yyyy==(currentyear))
                    {
                        temp.add(db.rst.getString(1));
                        temp.add(db.rst.getString(3));
                        totlesalay+=Double.parseDouble(db.rst.getString(6));
                        temp.add(db.rst.getString(5));
                       paidsalary+=Double.parseDouble(db.rst.getString(7));
                        temp.add(db.rst.getString(8));
                        temp.add(db.rst.getString(6));
                         temp.add(db.rst.getString(7));
                          temp.add(((totlesalay-paidsalary)+""));

                    }

                    data.add(temp);
                   
                }
                CustomerAllDetails.setModel(new DefaultTableModel(data,header));
            }
            if(SearchComboDuration.getSelectedItem().toString().equalsIgnoreCase("Today"))
            {

               Vector <String> header =new Vector <String>();
                Vector<Vector<String>> data=new Vector<Vector<String>>();
                header.add("Employee Name");
                header.add("Employee Contact");
                header.add("Receive  Date");
                header.add("Salary From");
                header.add("Totle Salary");
                header.add("Payed Salary");
                header.add("Pending Salary");
   

                DBConnection db=new DBConnection();
                db.pstmt=db.con.prepareStatement("select * from payed_salary order by curdate");
                db.rst=db.pstmt.executeQuery();
                while(db.rst.next())
                {
                   Vector<String> temp=new Vector<String>();
                    String date=db.rst.getString(5);
                    dd=Integer.parseInt(date.substring(8));
                    System.out.println(dd);
                    mm=Integer.parseInt(date.substring(5,7));
                    System.out.println(mm);
                    yyyy=Integer.parseInt(date.substring(0,4));
                    System.out.println(yyyy);
                    System.out.println("CurMonth"+currentmonth);
                    if(dd==(currentdate))
                    {
                    temp.add(db.rst.getString(1));
                        temp.add(db.rst.getString(3));
                        totlesalay+=Double.parseDouble(db.rst.getString(6));
                        temp.add(db.rst.getString(5));
                       paidsalary+=Double.parseDouble(db.rst.getString(7));
                        temp.add(db.rst.getString(8));
                        temp.add(db.rst.getString(6));
                         temp.add(db.rst.getString(7));
                          temp.add(((totlesalay-paidsalary)+""));


                    }

                    data.add(temp);
                   
                }
                CustomerAllDetails.setModel(new DefaultTableModel(data,header));
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }//GEN-LAST:event_SearchComboDurationItemStateChanged

    private void SearchComboDurationMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SearchComboDurationMouseEntered
        ReportEngine.setVisible(false);

    }//GEN-LAST:event_SearchComboDurationMouseEntered

    private void SearchComboDurationMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SearchComboDurationMouseExited
        ReportEngine.setVisible(true);
    }//GEN-LAST:event_SearchComboDurationMouseExited

    private void SearchComboDurationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchComboDurationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SearchComboDurationActionPerformed

    private void ReportEngineMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ReportEngineMouseEntered
        if(SearchCombo.getSelectedItem().toString().equalsIgnoreCase("Search By"))
        {
            ReportEngine.setEditable(false);
        }
        else
        {
            ReportEngine.setEditable(true);
        }

    }//GEN-LAST:event_ReportEngineMouseEntered

    private void ReportEngineKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ReportEngineKeyReleased
     double totlesalay=0,paidsalary=0;
        if(!SearchCombo.getSelectedItem().toString().equalsIgnoreCase("Search By"))
        {
            try
            {
                if(SearchCombo.getSelectedItem().toString().equalsIgnoreCase("Name"))
                {
                    Vector <String> header =new Vector <String>();
                    Vector<Vector<String>> data=new Vector<Vector<String>>();
                     header.add("Employee Name");
                header.add("Employee Contact");
                header.add("Receive  Date");
                header.add("Salary From");
                header.add("Totle Salary");
                header.add("Payed Salary");
                header.add("Pending Salary");

                    DBConnection db=new DBConnection();
                    db.pstmt=db.con.prepareStatement("select * from payed_salary where emp_name like ?");
                    db.pstmt.setString(1,"%"+ReportEngine.getText()+"%");
                    db.rst=db.pstmt.executeQuery();
                    while(db.rst.next())
                    {
                        Vector<String> temp=new Vector<String>();
                       temp.add(db.rst.getString(1));
                        temp.add(db.rst.getString(3));
                        totlesalay+=Double.parseDouble(db.rst.getString(6));
                        temp.add(db.rst.getString(5));
                       paidsalary+=Double.parseDouble(db.rst.getString(7));
                        temp.add(db.rst.getString(8));
                        temp.add(db.rst.getString(6));
                         temp.add(db.rst.getString(7));
                          temp.add(((totlesalay-paidsalary)+""));

                        data.add(temp);
                    }
                    CustomerAllDetails.setModel(new DefaultTableModel(data,header));
                }
                else if(SearchCombo.getSelectedItem().toString().equalsIgnoreCase("Phone No"))
                {
                    Vector <String> header =new Vector <String>();
                    Vector<Vector<String>> data=new Vector<Vector<String>>();
                  header.add("Employee Name");
                header.add("Employee Contact");
                header.add("Receive  Date");
                header.add("Salary From");
                header.add("Totle Salary");
                header.add("Payed Salary");
                header.add("Pending Salary");

                    DBConnection db=new DBConnection();
                    db.pstmt=db.con.prepareStatement("select * from payed_salary where emp_contact like ?");
                    db.pstmt.setString(1,"%"+ReportEngine.getText()+"%");
                    db.rst=db.pstmt.executeQuery();
                    while(db.rst.next())
                    {
                        Vector<String> temp=new Vector<String>();
                       temp.add(db.rst.getString(1));
                        temp.add(db.rst.getString(3));
                        totlesalay+=Double.parseDouble(db.rst.getString(6));
                        temp.add(db.rst.getString(5));
                       paidsalary+=Double.parseDouble(db.rst.getString(7));
                        temp.add(db.rst.getString(8));
                        temp.add(db.rst.getString(6));
                         temp.add(db.rst.getString(7));
                          temp.add(((totlesalay-paidsalary)+""));

                        data.add(temp);
                    }
                    CustomerAllDetails.setModel(new DefaultTableModel(data,header));
                }
                else
                {
                    if(SearchCombo.getSelectedItem().toString().equalsIgnoreCase("Employee I'd"))
                    {

                        Vector <String> header =new Vector <String>();
                        Vector<Vector<String>> data=new Vector<Vector<String>>();
                      header.add("Employee Name");
                header.add("Employee Contact");
                header.add("Receive  Date");
                header.add("Salary From");
                header.add("Totle Salary");
                header.add("Payed Salary");
                header.add("Pending Salary");

                        DBConnection db=new DBConnection();
                        db.pstmt=db.con.prepareStatement("select * from payed_salary where emp_id like ?");
                        db.pstmt.setString(1,"%"+ReportEngine.getText()+"%");
                        db.rst=db.pstmt.executeQuery();
                        while(db.rst.next())
                        {
                            Vector<String> temp=new Vector<String>();
                          temp.add(db.rst.getString(1));
                        temp.add(db.rst.getString(3));
                        totlesalay+=Double.parseDouble(db.rst.getString(6));
                        temp.add(db.rst.getString(5));
                       paidsalary+=Double.parseDouble(db.rst.getString(7));
                        temp.add(db.rst.getString(8));
                        temp.add(db.rst.getString(6));
                         temp.add(db.rst.getString(7));
                          temp.add(((totlesalay-paidsalary)+""));

                            data.add(temp);
                        }
                        CustomerAllDetails.setModel(new DefaultTableModel(data,header));
                    }
                }

            }
            catch(Exception e)
            {
                e.printStackTrace();
            }
        }
        else
        {

        }
    }//GEN-LAST:event_ReportEngineKeyReleased

    private void ReportEngineKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ReportEngineKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_ReportEngineKeyTyped

    private void jLabel44MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel44MouseClicked
this.setVisible(false);
    }//GEN-LAST:event_jLabel44MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SalaryDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SalaryDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SalaryDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SalaryDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SalaryDetails().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JTable CustomerAllDetails;
    private javax.swing.JLabel PriceSum;
    private javax.swing.JLabel PriceSumLabel;
    private javax.swing.JLabel QuantitySum;
    private javax.swing.JLabel QuantitySum1;
    private javax.swing.JTextField ReportEngine;
    private javax.swing.JComboBox<String> SearchCombo;
    private javax.swing.JComboBox<String> SearchComboDuration;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables
}
